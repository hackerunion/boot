#!/bin/bash

# Install the Hacker Union server on a compatible cloud provider
# Tested against AWS running Amazon Linux image

if (( $# < 3 )); then
  echo -e "Push complete server to a remote host.\n\nUsage: $0 url public-key private-key repo remote-path [clean: yes/no]\n"
  exit 1
fi

HOST="$1"
PUBKEY="$2"
PRIKEY="$3"
REPO="$4"
DEST="${5:-/home/ec2-user}"
CLEAN="$6"

if [ ! -f "$PUBKEY" ]; then
  echo $PUBKEY
  echo "Your public key does not exist."
  exit 2
fi

if [ ! -f "$PRIKEY" ]; then
  echo "Your private key does not exist."
  exit 3
fi

if echo "$CLEAN" | grep -qi '^ye\?s\?$'; then
  CLEAN="[ -d \"$DEST/root\" ] && rm -rf \"$DEST/root\""
fi

echo -e "Push new server to \"$HOST\" based on \"$REPO\"?\n"
[ -n "$CLEAN" ] && echo -e "WARNING: you've enabled \"clean\" mode which will erase existing data!\n"

read -p "Continue? (y/n) " RESP

if echo $RESP | grep -qvi '^ye\?s\?$'; then
  echo "Aborting!"
  exit 4
fi

echo "Copying keys..."
scp -i "$PRIKEY" "$PUBKEY" "$PRIKEY" "$HOST":"$DEST"

echo "Installing dependencies..."
ssh -ti "$PRIKEY" "$HOST" sudo yum install -y git docker

echo "Starting docker..."
ssh -ti "$PRIKEY" "$HOST" sudo service docker restart

echo "Wiring everything up..."
ssh -T -i "$PRIKEY" "$HOST" << EOF
        [ -d "$DEST/.ssh" ] || mkdir "$DEST/.ssh"
        mv "$DEST/`basename $PRIKEY`" "$DEST/`basename $PUBKEY`" "$DEST/.ssh"
        echo github.com \
          ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ== \
            > "$DEST/.ssh/known_hosts"
        chmod -R go-rwx "$DEST/.ssh"
        $CLEAN
        [ ! -d "$DEST/root" ] && git clone --recursive "$REPO" root
        pushd "$DEST/root"
        git checkout master
        git config branch.master.sync true
        git config branch.master.syncNewFiles true
        git submodule foreach --recursive git checkout master
        git submodule foreach --recursive git config branch.master.sync true
        git submodule foreach --recursive git config branch.master.syncNewFiles true
        popd
        chmod u+x "$DEST/root/boot/lib/git-sync" "$DEST/root/boot/deploy"
        bash "$DEST/root/boot/deploy"
EOF

echo "Done!"
