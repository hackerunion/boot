#!/bin/bash

# This is run on the server to deploy the dockerized kernel, to synchronize the root repo, and to reload on error

ROOT="$1"
BOOT="$ROOT/boot/host"
SYNC="$BOOT/bin/opt/git-sync"

POLL=60 # 300        # 1m
CYCLES=144      # 5m * 144 = 12h
FORCE="$(mktemp /tmp/host.XXXXXX)" && echo 0 > "$FORCE"
CURRENT="$(mktemp /tmp/host.XXXXXX)" && echo 0 > "$CURRENT"

if [ ! -x "$SYNC" ]; then
  echo "Unable to find git-sync in boot repository. Exiting..."
  exit 1
fi

force() {
  echo 1 > "$FORCE"
}

sync() {
  pushd "$ROOT" > /dev/null
  
  if ! test -x "$SYNC"; then
    chmod u+x "$SYNC"
  fi

  if ! $SYNC; then
    echo "Sync failed for root, aborting."
    return 3
  fi

  git checkout master

  popd > /dev/null
}

function try_sync() {
  if sync; then
    echo -e "[`date`] ------------ SUCCESS ------------"
    return 0
  else
    echo -e "[`date`] ************ FAIL ************"
    return 1
  fi
}

function sync_needed() {
  RESULT=1

  pushd "$ROOT" > /dev/null
  git fetch origin
  
  if [ -n "$(git log HEAD..origin/master --oneline)" ]; then
    RESULT=0
  fi
  popd > /dev/null

  return $RESULT
}

function boot() {
  pushd $BOOT > /dev/null
  echo "Booting kernel..."
  make kernel-boot-no-build
  popd > /dev/null
}

function halt() {
  pushd $BOOT > /dev/null
  echo "Halting kernel..."
  make kernel-halt-and-block
  popd > /dev/null
}

function try_halt() {
  halt > /dev/null 2>&1
}

function wait_for_boot() {
  pushd $BOOT > /dev/null
  while ! make kernel-running > /dev/null 2>&1; do
    sleep 1
  done
  popd > /dev/null
}

function invalid() {
  ( ! make kernel-running && make kernel-locked ) > /dev/null 2>&1
}

function state() {
  pushd $BOOT > /dev/null
  
  if invalid; then
    echo "invalid"
  elif make kernel-running > /dev/null 2>&1; then
    echo "running"
  else
    echo "stopped"
  fi
    
  popd > /dev/null
}

function action() {
  pushd $BOOT > /dev/null
  
  if [ "$1" = "invalid" -o "$1" = "stopped" ]; then
    echo "reboot"
  elif (( `cat $CURRENT` >= $CYCLES || `cat $FORCE` == 1 )); then
    echo 0 > "$CURRENT"
    echo 0 > "$FORCE"
    echo "refresh"
  elif sync_needed > /dev/null 2>&1; then
    echo "resync"
  else
    echo "continue"
    echo "$(( `cat $CURRENT` + 1 ))" > "$CURRENT"
  fi

  popd > /dev/null
}

function main() {
  # less attractive than a webhook, but decouples kernel from github
  while true; do
    STATE="$(state)"
    ACTION="$(action $STATE)"

    echo "[`date`] Next: $STATE => $ACTION"

    case "$ACTION" in
      reboot)
        try_halt
        boot
        wait_for_boot
        echo "[`date`] Done"
        ;;

      refresh|resync)
        [ "$STATE" = "running" ] && halt
        try_sync
        boot
        wait_for_boot
        echo "[`date`] Done"
        ;;

      *)
        echo "[`date`] Status (`cat $CURRENT` / $CYCLES) [${POLL}s]"
        sleep $POLL;
    esac
  done
}

trap force SIGUSR1

echo "[`date`] Agent started"
main
