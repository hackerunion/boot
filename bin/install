#!/bin/bash

# Install the Hacker Union server on a compatible cloud provider
# Tested against AWS running Amazon Linux image

if (( $# < 7 )); then
  echo -e "Push complete server to a remote host.\n\nUsage: $0 public-key private-key local-conf url repo remote-path [clean: yes/no]\n"
  exit 1
fi

PUBKEY="$1"
PRIKEY="$2"
CONF="$3"
HOST="$4"
REPO="$5"
DEST="$6"
ROOT="$7"
CLEAN="$8"

if [ ! -f "$PUBKEY" ]; then
  echo $PUBKEY
  echo "Your public key does not exist."
  exit 2
fi

if [ ! -f "$PRIKEY" ]; then
  echo "Your private key does not exist."
  exit 3
fi

if [ ! -f "$CONF" ]; then
  echo "Your local configuration file does not exist."
  exit 4
fi

if echo "$CLEAN" | grep -qiv '^ye\?s\?$'; then
  CLEAN=""
fi

echo -e "Push new server to \"$HOST\" based on \"$REPO\"?\n"
[ -n "$CLEAN" ] && echo -e "WARNING: you've enabled \"clean\" mode which will erase existing data!\n"

read -p "Continue? (y/n) " RESP

if echo $RESP | grep -qvi '^ye\?s\?$'; then
  echo "Aborting!"
  exit 4
fi

echo "Copying keys and local configuration..."
scp -i "$PRIKEY" "$PUBKEY" "$PRIKEY" "$CONF" "$HOST":"$DEST"

echo "Installing dependencies..."
ssh -ti "$PRIKEY" "$HOST" sudo yum install -y git docker m4

if [ -n "$CLEAN" ]; then
  echo "Cleaning up old repository..."
  ssh -ti "$PRIKEY" "$HOST" sudo rm -rf "$ROOT"
fi

echo "Preparing user for docker..."
ssh -ti "$PRIKEY" "$HOST" sudo gpasswd -a \${USER} docker

echo "Reloading docker..."
ssh -ti "$PRIKEY" "$HOST" sudo service docker restart

echo "Wiring everything up..."
ssh -T -i "$PRIKEY" "$HOST" << EOF
        pushd "$DEST"
        [ -d "$DEST/.ssh" ] || mkdir "$DEST/.ssh"
        [ -d "$DEST/local" ] || mkdir "$DEST/local"
        mv "$DEST/`basename $PRIKEY`" "$DEST/`basename $PUBKEY`" "$DEST/.ssh"
        mv "$DEST/`basename $CONF`" "$DEST/local/config.m4"
        echo github.com \
          ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ== \
            > "$DEST/.ssh/known_hosts"
        chmod -R go-rwx "$DEST/.ssh" "$DEST/local"
        newgrp docker
        git config --global user.name "root"
        git config --global user.email "root@localhost"
        (  [ ! -d "$ROOT" ] || rmdir "$ROOT" 2> /dev/null ) && git clone --progress --recursive "$REPO" "$ROOT"
        pushd "$ROOT"
        git checkout master
        git config branch.master.sync true
        git config branch.master.syncNewFiles true
        git submodule foreach --recursive git checkout master
        git submodule foreach --recursive git config branch.master.sync true
        git submodule foreach --recursive git config branch.master.syncNewFiles true
        popd
        pushd "$ROOT/boot"
        mkdir build 2> /dev/null
        chmod -R u+x ./configure ./bin
        ./configure yes
        make docker-build
        popd
        popd
        bash "$ROOT/boot/bin/deploy" "$ROOT"
EOF

echo "Done!"
