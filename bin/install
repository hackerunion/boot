#!/bin/bash

# Install the Hacker Union server on a compatible cloud provider
# Tested against AWS running Amazon Linux image

# TODO: rewrite this to use a proper deployment framework

if (( $# < 12 )); then
  echo -e "Push complete server to a remote host.\n\nUsage: $0 public-key private-key secure-key secure-cert local-conf url repo remote-base-path remote-key-path remote-cert-path remote-conf-path remote-root-path [clean: yes/no]\n"
  exit 1
fi

PUBKEY="$1"
PRIKEY="$2"
SSLKEY="$3"
SSLCERT="$4"
CONF="$5"
HOST="$6"
REPO="$7"
DEST="$8"
DESTKEY="$9"
DESTCERT="${10}"
DESTCONF="${11}"
ROOT="${12}"
CLEAN="${13}"

if [ ! -f "$PUBKEY" ]; then
  echo $PUBKEY
  echo "Your public key does not exist."
  exit 2
fi

if [ ! -f "$PRIKEY" ]; then
  echo "Your private key does not exist."
  exit 3
fi

if [ ! -f "$SSLKEY" ]; then
  echo "Your secure server key does not exist."
  exit 4
fi

if [ ! -f "$SSLCERT" ]; then
  echo "Your secure server certificate does not exist."
  exit 5
fi

if [ ! -f "$CONF" ]; then
  echo "Your local configuration file does not exist."
  exit 6
fi

if echo "$CLEAN" | grep -qiv '^ye\?s\?$'; then
  CLEAN=""
fi

echo -e "Push new server to \"$HOST\" based on \"$REPO\"?\n"
[ -n "$CLEAN" ] && echo -e "WARNING: you've enabled \"clean\" mode which will erase existing data!\n"

read -p "Continue? (y/n) " RESP

if echo $RESP | grep -qvi '^ye\?s\?$'; then
  echo "Aborting!"
  exit 7
fi

echo "Removing old processes..."
ssh -ti "$PRIKEY" "$HOST" crontab -r 
ssh -ti "$PRIKEY" "$HOST" sudo killall babysit agent

echo "Copying keys and local configuration..."
scp -i "$PRIKEY" "$PUBKEY" "$PRIKEY" "$SSLKEY" "$SSLCERT" "$CONF" "$HOST":"$DEST"

echo "Installing dependencies..."
ssh -ti "$PRIKEY" "$HOST" sudo yum install -y git docker m4

if [ -n "$CLEAN" ]; then
  echo "Cleaning up old repository..."
  ssh -ti "$PRIKEY" "$HOST" sudo rm -rf "$ROOT"
fi

echo "Preparing user for docker..."
ssh -ti "$PRIKEY" "$HOST" sudo gpasswd -a \${USER} docker

echo "Reloading docker..."
ssh -ti "$PRIKEY" "$HOST" sudo service docker restart

echo "Wiring everything up..."

AGENT="$ROOT/boot/bin/babysit $DEST/local/agent.pid $ROOT/boot/bin/agent $ROOT/var/log/agent $ROOT"

ssh -Ti "$PRIKEY" "$HOST" << EOF
  pushd "$DEST"
  [ -d "$DEST/.ssh" ] || mkdir "$DEST/.ssh"
  [ -d "$DEST/local" ] || mkdir "$DEST/local"
  mv "$DEST/`basename $PRIKEY`" "$DEST/`basename $PUBKEY`" "$DEST/.ssh"
  mv "$DEST/`basename $SSLKEY`" "$DESTKEY"
  mv "$DEST/`basename $SSLCERT`" "$DESTCERT"
  mv "$DEST/`basename $CONF`" "$DESTCONF"
  echo github.com \
    ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ== \
      > "$DEST/.ssh/known_hosts"
  chmod -R go-rwx "$DEST/.ssh" "$DEST/local" "$DESTKEY" "$DESTCERT" "$DESTCONF"
  newgrp docker
  git config --global user.name "root"
  git config --global user.email "root@localhost"
  ( [ ! -d "$ROOT" ] || rmdir "$ROOT" 2> /dev/null ) && git clone --progress --recursive "$REPO" "$ROOT"
  pushd "$ROOT"
  git checkout master
  git config branch.master.sync true
  git config branch.master.syncNewFiles true
  popd
  pushd "$ROOT/boot"
  mkdir build 2> /dev/null
  chmod -R u+x ./configure ./bin
  ./configure yes
  make docker-build
  popd
  echo "* * * * * $AGENT" | crontab
  bash $AGENT
EOF

echo "Done!"
