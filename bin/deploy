#!/bin/bash

# This is run on the server to deploy the dockerized kernel, to synchronize the repositories, and to reload on error
ROOT="$1"
BOOT="$ROOT/boot"
SRC="$ROOT/usr/src/kernel"
SYNC="$BOOT/bin/opt/git-sync"

POLL=180
CYCLES=30
CURRENT="$(mktemp /tmp/host.XXXXXX)" && echo 0 > "$CURRENT"

if [ ! -x "$SYNC" ]; then
  echo "Unable to find git-sync in boot repository. Exiting..."
  exit 1
fi

sync() {
  pushd "$BOOT"

  if ! $SYNC; then
    echo "Sync failed for boot, aborting."
    return 1
  fi

  git checkout master

  popd

  pushd "$SRC"

  if ! $SYNC; then
    echo "Sync failed for kernel, aborting."
    return 2
  fi

  git checkout master

  popd
  
  pushd "$ROOT"

  if ! $SYNC; then
    echo "Sync failed for root, aborting."
    return 3
  fi

  git checkout master

  popd
}

function try_sync() {
  if sync; then
    echo "Sync was successful"
    return 0
  else
    echo "Sync failed"
    return 1
  fi
}

function sync_needed() {
  RESULT=1

  pushd "$ROOT"
  git fetch origin
  
  if [ -n "$(git log HEAD..origin/master --oneline)" ]; then
    RESULT=0
  fi
  popd

  return $RESULT
}

function boot() {
  pushd $BOOT
  echo "Launching kernel in docker..."
  make kernel-boot-no-build
  popd
}

function halt() {
  pushd $BOOT
  echo "Stopping kernel in docker..."
  make kernel-halt-and-block
  popd
}

function poll_state() {
  pushd $BOOT
  
  if (( `cat $CURRENT` > $CYCLES )); then
    echo 0 > "$CURRENT"
    echo "refresh"
  elif sync_needed > /dev/null 2>&1; then
    echo "resync"
  elif make kernel-running > /dev/null 2>&1; then
    echo "running"
  else
    echo "crash"
  fi
  popd
  
  echo "$(( `cat $CURRENT` + 1 ))" > "$CURRENT"
}

function main() {
  STATE='startup'

  # less attractive than a webhook, but decouples kernel from github
  while true; do
    case "$STATE" in
      startup|crash)
        echo "Entering $STATE..."
        try_sync
        boot
        echo "Done! ($STATE)"
        ;;

      refresh|resync)
        echo "Entering $STATE..."
        halt
        try_sync
        boot
        echo "Done! ($STATE)"
        ;;

      *)
        echo "Mark: `date` (`cat $CURRENT` / $CYCLES) [${POLL}s]"
        sleep $POLL;
    esac

    STATE=`poll_state`
  done
}

echo "Deploy script running on remote server."
main
